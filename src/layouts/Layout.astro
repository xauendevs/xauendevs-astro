---
import Header from "@/components/Navbar.astro";
import Footer from "@/sections/Footer.astro";
import "@fontsource/roboto";
import ClientRouter from "astro/components/ClientRouter.astro";
import SpeedInsights from "@vercel/speed-insights/astro";

interface Props {
  title: string;
  description: string;
}

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>
  </head>
  <body>
    <Header />
    <main class="px-8 md:px-10">
      <slot class="" />
    </main>
    <Footer />
    <ClientRouter />
  </body>
</html>
<style is:global>
  :root {
    --color-primary: #ddd;
    --color-secondary: #333;
    --color-accent: #f6b703;
    --color-dark: #0d0d0d;
    --color-accent-rgb: 213, 255, 0;

    --background-color: #0a0c00;
    --background-twitch: var(--color-twitch-ice);

    --color-twitch: #9146ff;
    --color-twitch-ice: #f0f0ff;
  }

  html {
    font-family: "Roboto Flex Variable", system-ui, sans-serif;
    scroll-behavior: smooth;
  }

  @media (prefers-reduce-motion: reduce) {
    html {
      scroll-behavior: auto;
    }
  }

  #header-nav {
    animation: blur linear both;
    animation-timeline: scroll();
    animation-range: 0 500px;
  }
  @keyframes blur {
    to {
      box-shadow:
        0px 5px 50px -5px rgba(0, 0, 0, 0.1),
        0px 0px 0 1px rgba(0, 0, 0, 0.3);
      background: rgba(0, 0, 0, 0.3);
      backdrop-filter: blur(10px);
    }
  }
</style>
<SpeedInsights />
<script>
  import { $, $$ } from "@/lib/dom-selector";

  const observer = new MutationObserver((mutations) => {
    const $clipContainer = $$(".clip-container");
    if ($clipContainer) {
      initializeClipHandlers();
      observer.disconnect();
    }
  });
  observer.observe(document.body, { childList: true, subtree: true });

  const initializeClipHandlers = () => {
    const $clipContainer = $$(".clip-container");
    const $clipDialog = $(".clip-dialog") as HTMLDialogElement;
    const $closeButton = $(".close-dialog");
    let $ytFrame = $(".yt-iframe");
    const ytFrameCopy = $ytFrame;

    if (!$clipDialog) return;

    $clipDialog.addEventListener("close", () => {
      if ($ytFrame !== null) {
        $ytFrame.setAttribute("src", "");
      } else {
        ytFrameCopy?.setAttribute("src", "");
      }
    });

    $closeButton?.addEventListener("click", () => {
      $clipDialog.close();
    });

    $clipDialog.addEventListener("click", (event) => {
      const target = event.target as HTMLElement;
      if (target === $clipDialog) $clipDialog.close();
    });

    $clipContainer?.forEach((el) => {
      el.addEventListener("click", async (event) => {
        const currentTarget = event.currentTarget as HTMLElement;
        const { url } = currentTarget.dataset;
        if (!url) return;
        $ytFrame = $(".yt-iframe") as HTMLIFrameElement;
        if ($ytFrame !== null) {
          $ytFrame.setAttribute("src", `${url}&autoplay=1`);
        } else {
          if (ytFrameCopy) {
            $clipDialog?.querySelector("div")?.prepend(ytFrameCopy);
            ytFrameCopy.setAttribute("src", `${url}&autoplay=1`);
          }
        }
        $clipDialog.showModal();
      });
    });
  };

  document.addEventListener("astro:page-load", initializeClipHandlers);
</script>
