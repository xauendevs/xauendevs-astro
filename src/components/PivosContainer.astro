---
import ArrowRight from "@/components/icons/ArrowRight.astro";
import PivoCard from "@/components/PivoCard.astro";
import { getPivosStrapi } from "@/lib/get-info-pivos";

const pivos = await getPivosStrapi();
const nextEvent = pivos?.find((pivo) => {
  return pivo.date.getTime() > new Date().getTime();
});

const pastPivos = pivos
  ?.filter((pivo) => {
    return pivo.date.getTime() < new Date().getTime();
  })
  .slice(0, 5);
---

<div
  class="flex gap-5 md:gap-10 overflow-x-auto md:overflow-x-hidden container-mobile"
>
  {
    nextEvent && (
      <div>
        <h3 class="text-xl font-semibold mt-4 mb-2">Pr√≥xima charla</h3>
        <PivoCard
          id={nextEvent.id}
          title={nextEvent.title}
          image={nextEvent.image}
          speakers={nextEvent.speakers}
          place={nextEvent.place}
          date={nextEvent.date}
          videoId={nextEvent.videoId}
          isNext
        />
      </div>
    )
  }

  <div class="grow md:overflow-x-hidden">
    <h3 class="text-xl font-semibold mt-4 mb-2">Charlas recientes</h3>

    <div
      id="past-pivos"
      class="flex md:overflow-x-auto gap-5 md:gap-10 past-pivos scroll-smooth min-h-[350px] max-h-[350px] h-[350px] md:min-h-[460px] md:max-h-[460px] md:h-[460px]"
    >
      {
        pastPivos &&
          pastPivos.map(
            ({ id, title, image, date, speakers, place, videoId }) => (
              <PivoCard
                id={id}
                title={title}
                image={image}
                speakers={speakers}
                place={place}
                date={date}
                videoId={videoId}
              />
            )
          )
      }
      <a href="/pivoandcode">
        <div
          class="flex flex-col min-w-40 h-full items-center justify-center gap-2"
        >
          <span class="text-center font-semibold leading-4">
            Mostrar todos los eventos
          </span>
          <div
            class="rounded-full font-bold text-xl h-10 w-10 flex justify-center items-center text-black"
          >
            <ArrowRight class="grayscale opacity-10" />
          </div>
        </div>
      </a>
    </div>
  </div>

  <style>
    .container-mobile::-webkit-scrollbar,
    .past-pivos::-webkit-scrollbar {
      display: none;
    }
    .scroll-smooth {
      animation: scrollSmooth 1s;
    }
    @keyframes scrollSmooth {
      from {
        scroll-behavior: smooth;
      }
      to {
        scroll-behavior: auto;
      }
    }
  </style>

  <script>
    import { $ } from "@/lib/dom-selector";

    const pastPivoContainer = $("#past-pivos");
    const iconLeft = $("#left-scroll");
    const iconRight = $("#right-scroll");
    if (iconLeft) {
      iconLeft.style.opacity = "50%";
      iconLeft.style.filter = "grayscale(5)";
    }

    iconLeft?.addEventListener("click", () => {
      if (pastPivoContainer)
        pastPivoContainer.scrollLeft = pastPivoContainer.scrollLeft - 200;
    });

    iconRight?.addEventListener("click", () => {
      if (pastPivoContainer)
        pastPivoContainer.scrollLeft = pastPivoContainer.scrollLeft + 200;
    });

    pastPivoContainer?.addEventListener("scroll", function () {
      if (pastPivoContainer.scrollLeft === 0) {
        if (iconLeft) {
          iconLeft.style.opacity = "50%";
          iconLeft.style.filter = "grayscale(5)";
        }
      } else {
        if (iconLeft) {
          iconLeft.style.opacity = "100%";
          iconLeft.style.filter = "grayscale(0)";
        }
      }
      const endContainer =
        pastPivoContainer.scrollLeft + pastPivoContainer.clientWidth >=
        pastPivoContainer.scrollWidth;

      if (endContainer) {
        if (iconRight) {
          iconRight.style.opacity = "50%";
          iconRight.style.filter = "grayscale(5)";
        }
      } else {
        if (iconRight) {
          iconRight.style.opacity = "100%";
          iconRight.style.filter = "grayscale(0)";
        }
      }
    });
  </script>
</div>
